1. 过滤器
    1.1 过滤器概述
        在JavaWeb 中，一共提供了三门技术，分别是Servlet、Filter、Listener, 这三门技术统称为JavaWeb 的三大组件。其中Filter 也叫做过滤器。
        所谓的过滤器其实就是对用户的请求进行拦截处理。通过滤过器开发人员可以实现在用户访问之前或者是响应之后对请求和响应进行拦截，从而做一些相关的处理。
        例如：检查用户是否登陆 - 如果用户已经登陆，可以放行访问对应的资源，如果用户没有登陆，可以跳转到登陆页面提示用户进行登陆。
        小结：
            1). 所谓的过滤器就是拦截用户对资源的访问；
            2). 一个过滤器可以配置拦截多个资源，一个资源也可以配置多个过滤器进行拦截；
            3). 所谓的拦截就是将代表请求的request 对象和代表响应的response 对象拦截下来: 
                a). 判断用户是否登陆，决定是否放行对后面资源的访问; 
                b). 在访问之前或者响应之前进行拦截，比如：全站乱码处理

    1.2 如何开发过滤器
        1.2.1 开发过滤器的步骤
            (1) 写一个class 实现过滤器接口(Filter), 并实现其中的方法；
            (2) 在WEB 应用的web.xml 文件中配置过滤器；
            过滤器案例：
                a). 创建两个Servlet, 分别是ServletDemo1 和ServletDemo2, 测试访问；
                b). 创建一个过滤器，实现Filter 接口；
                c). 配置过滤器对两个Servlet 进行拦截； -- 在web.xml 文件中进行配置(servlet_6th_jsp/WEB-INF/web.xml)；
                d). 分别访问ServletDemo1 和ServletDemo2，查看FilterDemo1 是否会对这两个资源的请求进行拦截处理；
            过滤器案例改造;
                a). 编写code.jsp 用来输入暗号；
                b). 编写error.jsp 用来提示(当用户输入暗号不正确时，跳转到该页面);
                c). 修改FilterDemo1 中的doFilter() 方法，对拦截的请求做处理：获取暗号并判断暗号的结果；

        1.2.2 过滤器配置
            <!-- 过滤器(filter)配置 -->
            <filter>
            	<filter-name>FilterDemo1</filter-name>
            	<filter-class>com.tedu.filter.FilterDemo1</filter-class>
            </filter>
            <filter-mapping>
            	<filter-name>FilterDemo1</filter-name>
            	<!-- 指定要拦截的资源路径、资源名、正则也可以 -->
            	<!-- 配置过滤器所要拦截的资源路径(规则) -->
            	<url-pattern>/ServletDemo1</url-pattern>
            	<url-pattern>/ServletDemo2</url-pattern>
            	<!-- 
            	    这样的配置是可以的，但是一般不会这样配置。因为这样配置无论访问哪个资源都会跳到过滤器。
            		<url-pattern>/*</url-pattern>
            	-->
            	<!-- 也可以指定拦截的ServletName -->
            	<!-- 
            	<servlet-name>ServletDemo1</servlet-name>
            	 -->
            </filter-mapping>

    1.3 过滤器中的方法
        1.3.1 过滤器的生命周期(了解)
            在WEB 应用被加载之后，服务器会立即创建出该WEB 应用所有的Filter 实例。创建之后，服务器会立即调用 init 方法进行初始化操作，之后Filter 实例会一直驻留在服务器的内存中。当过滤器拦截到请求时，服务器会调用doFilter 方法来处理请求。直到服务器关闭或者WEB 应用被移出容器时为止，随着WEB 应用的销毁而销毁。在销毁之前服务器会调用destroy 方法，进行善后处理。

        1.3.2 过滤器中的方法
            init();
            doFilter(); 参数FilterChain 代表多个过滤器组成的过滤器链对象。这个对象用来决定是否放行过滤器。
                    一个资源可以配置多个过滤器进行拦截，多个过滤器执行的顺序是按照Filter 在web.xml 中对应的<filter-mapping>标签的顺序。多个过滤器就组成了一条过滤器链。
                    放行过滤器有可能是访问对应的资源，也有可能是后面的过滤器。
            destroy();

    1.4 过滤器的应用(全站乱码处理过滤器)
        1.4.1 创建一个过滤器类(EncodingFilter)

        1.4.2 在web.xml 文件中配置过滤器

        1.4.3 实现EncodingFilter 的doFilter 方法
            在EncodingFilter 中处理请求参数乱码和响应正文乱码。

        1.4.4 通过装饰者模式实现对GET 提交的参数乱码的处理。