/**
 * scala for 循环
 * scala 的集合是一个大的概念，包含了：Array, List, Set, Map, Tuple, Range
 * for yield 的作用：遍历一个集合，返回一个新集合。指的是：返回的类型与遍历的类型一致。如果遍历的是Array，返回也是Array。
 */
object Demo05 {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet

  val a1 = Array(1, 2, 3, 4)                      //> a1  : Array[Int] = Array(1, 2, 3, 4)

  // 循环区间为[1, 10] 但是步长为3
  for (i <- 1 to 10 by 3) {
    println(i)                                    //> 1
                                                  //| 4
                                                  //| 7
                                                  //| 10
  }

  // 要求用scala 的for 循环打印99 乘法表
  for (i <- 1 to 9) {

    for (j <- 1 to i) {
      print(j + "*" + i + "=")
      print(i * j)
      print(" ")
    }
    println()
  }                                               //> 1*1=1 
                                                  //| 1*2=2 2*2=4 
                                                  //| 1*3=3 2*3=6 3*3=9 
                                                  //| 1*4=4 2*4=8 3*4=12 4*4=16 
                                                  //| 1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 
                                                  //| 1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 
                                                  //| 1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 
                                                  //| 1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 
                                                  //| 1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81 
  
  // 在循环中添加判断条件，多条件中间使用分号隔开
  for (i <- 1 to 10; if i > 5; if i % 2 == 0) {
    println(i)                                    //> 6
                                                  //| 8
                                                  //| 10
  }

  // 注意：scala 的for 循环中。条件里面赋值时，只能使用常量val 来接收，不能用变量var 来接收
  for (i <- 1 to 9; j <- 1 to i; val sep = if (i == j) "\r\n" else "\t") {
    print(j + "*" + i + "=" + i * j + sep)        //> 1*1=1
                                                  //| 1*2=2	2*2=4
                                                  //| 1*3=3	2*3=6	3*3=9
                                                  //| 1*4=4	2*4=8	3*4=12	4*4=16
                                                  //| 1*5=5	2*5=10	3*5=15	4*5=20	5*5=25
                                                  //| 1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36
                                                  //| 1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49
                                                  //| 1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64
                                                  //| 1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81
  }

  // for yield 表达式
  // 作用：遍历 一个集合，返回一个新集合
  val a2 = Array(1, 2, 3, 4)                      //> a2  : Array[Int] = Array(1, 2, 3, 4)
  val a8 = for (i <- a2) yield {
    i * 2                                         //> a8  : Array[Int] = Array(2, 4, 6, 8)
  }

  // 声明一个Map，并遍历这个Map
  val m1 = Map("tom" -> 23, "rose" -> 30, "jim" -> 35)
                                                  //> m1  : scala.collection.immutable.Map[String,Int] = Map(tom -> 23, rose -> 30
                                                  //| , jim -> 35)
  for (i <- m1) {
    println(i)                                    //> (tom,23)
                                                  //| (rose,30)
                                                  //| (jim,35)
  }
  for ((k, v) <- m1) {
    println(v)                                    //> 23
                                                  //| 30
                                                  //| 35
  }

  // 注意：scala 的for (赋值时，只能使用常量val 来接收，不能用变量var 来接收)
  for (i <- 1 to 9; j <- 1 to i; val sep = if (i == j) "\r\n" else "\t") {
    print(s"$j*$i=${j*i}$sep")                    //> 1*1=1
                                                  //| 1*2=2	2*2=4
                                                  //| 1*3=3	2*3=6	3*3=9
                                                  //| 1*4=4	2*4=8	3*4=12	4*4=16
                                                  //| 1*5=5	2*5=10	3*5=15	4*5=20	5*5=25
                                                  //| 1*6=6	2*6=12	3*6=18	4*6=24	5*6=30	6*6=36
                                                  //| 1*7=7	2*7=14	3*7=21	4*7=28	5*7=35	6*7=42	7*7=49
                                                  //| 1*8=8	2*8=16	3*8=24	4*8=32	5*8=40	6*8=48	7*8=56	8*8=64
                                                  //| 1*9=9	2*9=18	3*9=27	4*9=36	5*9=45	6*9=54	7*9=63	8*9=72	9*9=81
  }
}