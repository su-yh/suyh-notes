DHTML




1. DHTML 概述
    1.1 全称: Dynaic HTML(动态HTML) 它不是一门新的技术，而是将我们之前学习的技术(HTML、CSS、JavaScript)整合在了一起，可以让我们复用JS 来操作页面元素或CSS 属性，使用页面有一个动态的效果，和用户具有了交互的行为。
    1.2 DHTML 工作原理
        将HTML 中所有的元素都用一个一个JS 对象来进行表示，利用对象来表示元素本身，利用对象之间的包含关系来表示元素之间的层级关系。
        利用对象上提供的属性或方法，来操作元素的属性或行为。
        这样就可以将HTML 、CSS、JavaScript 技术整合到一起，形成了DHTML 技术。

        DHTML 可以分为两部分内容: 

        1.2.1 BOM 浏览器相关的对象(Brower Object Model)
            window 对象表示浏览器中一个打开的窗口
            window.closed 表示该窗口是否已经关闭了
            window.onload 事件: 在整个HTML 文档加载完之后立即触发执行。
                比如：获取一个input 按钮，接着为按钮动态绑定点击事件，但是如果将代码写在了head 内部的script 标签内，将会抛出异常，提示input 按钮获取为null, 原因是在获取input 元素的代码执行，下面的input 元素还没有被加载，因此获取不到，所以需要在input 元素加载之后获取，此时可以将获取的代码放在window.onload 事件中. 在整个文档加载完之后再执行。

        1.2.2 DOM 文档相关的对象(Document Object Model)
            1.2.2.1 获取HTML 元素
                document.getElementById("id 值");   // 通过元素的ID 值来获取指定ID的元素
                document.getElementsByName("name 值");  // 根据元素的name 值来获取指定name 值的元素组成的数组
                document.getElementsByTagName("元素名称");  // 根据元素的名称获取指定名称的元素

                value 属性: 获取或设置输入控件的value 
                innerHTML: 
                innerText: 

            1.2.2.2 增加、删除、修改HTML元素
                创建元素
                    document.createElement("元素名称<div>");
                克隆元素
                    oNode.cloneNode([true/false]); 克隆当前元素，参数true: 克隆元素及元素内部所有的内容，默认为false
                插入元素
                    oParent.insertBefore(oNewNode, oChild): 通过父元素将新元素插入到某一个子元素的前面 
                添加元素
                    oParent.appendChild(oChild);
                删除元素
                    oParent.removeChild(oChild);
                替换元素
                    oParent.replaceChild(oNewNode, oChildNode);

                parentNode 属性 -- 获取父元素
                obj.style.dispaly -- 设置元素是否以及如何显示

                onclick事件 -- 在元素被点击之后立即触发
                onchange事件 -- 在下拉选框中的选项切换时触发
















































