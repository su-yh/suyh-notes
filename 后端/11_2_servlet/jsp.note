1. JSP 
    1.1 JSP 概述
        1.1.1 什么是JSP？
            JSP 和Servlet 都是由SUN 公司提供的动态WEB 资源开发技术，看起来非常像一个HTML，但是和HTML 不同的是,JSP 中可以书写JAVA 代码。所以JSP 是一个动态WEB 资源开发技术。
            JSP 本质上是一个Servlet.
            示例: 分别使用Servlet 和JSP 向浏览器做出响应，响应当前时间。

        1.1.2 JSP 的由来
            Servlet 本质上是一段java 代码，非常适合来处理逻辑，但是处理的结果不适合向外输出，因为Servlet 不适合向外输出一个完整的HTML 网页！
            HTML 是用来开发网页的一门技术，可以用来开发网页作为响应页面来输出，但HTML 开发出来的网页本质上就是一个文档，无法响应动态的数据。
            JSP 看起来就是一个HTML 可以编写HTML 代码作为响应页面来输出，同时JSP 可以编写JAVA 代码，可以展示动态的数据。
            因此JSP 的出现可以解决既要向外响应HTML页面，又要展示动态数据的难题。
            JSP 在第一次被访问时会被翻译成一个Servlet.其实在访问JSP 后看到的HTML 网页就是JSP 翻译成的Servlet 在向外输出.

    1.2 JSP 语法
        1.2.1 模版元素
            直接书写在JSP 中的HTML 内容，称之为JSP 的模版元素，比如：
                <html>
                <head>
                	<title>Insert title here</title>
                </head>
                <body>
                </body>
                </html>


        1.2.2 JSP 表达式
            在JSP 的表达式中，可以输出常量、变量、表达式的值
            格式: <%= 书写java 代码(常量、变量、表达式) %>
            注意：在JSP 的表达式中不能使用分号(';')
            在翻译后的Servlet 中计算表达式的值再原样输出

        1.2.3 JSP 脚本片段
            JSP 脚本片段中可以书写大量的JAVA 语句。
            格式: <% Java 代码; %>
            注意：Java 代码必须以分号(';') 结束。

            脚本片段的细节：
            * 需求：在JSP 中通过脚本片段输出5 次hello jsp;
                多个脚本片段之间的内容是可以互相访问的。
                在JSP 的脚本片段中书写的内容可以是不完整的，但是在翻译后的Servlet 中必须要符合JAVA 语法才可以。
        	<% for (int i = 0; i < 5; i++) { %>
        		hello jsp... <br />
        	<% } %>

        1.2.4 JSP 注释
            格式: <%-- 注释内容 --%>

        1.2.5 JSP 指令
            1. JSP 指令格式
                指令的语法格式: <%@ 指令名称 若干属性声明... %>
                 JSP 指令不会直接产生输出，而是用来指挥JSP 解析引擎如何解释执行JSP 页面中其他部分内容(即除了JSP 指令以外的内容);
            2. JSP 中有三种指令
                - page 指令: <%@ page ... %> 声明JSP 页面的基本属性信息。
                    作用: 
                        用来声明JSP 页面的基本属性(声明当前JSP 使用的字符集编码或者 声明当前JSP 在翻译时是否需要创建session 对象等...)
                        page 指令 可以放在JSP 的任意位置，但是为了可读性考虑，一般都将其放在了第一行。
                    常用的属性: 
                        <%@ page language="java" %> language 属性用于定义 JSP 使用的语言是java;
                        <%@ page extends="package.class" %> extends 属性用于定义Servlet 后所要继承的类。注意，所要继承的类一定得是一个Servlet, 一般不用。
                        <%@ page import="java.util.*" %> 用来导入对应的包。
                        <%@ page pageEncoding="UTF-8" %> 用来指定服务器解析JSP 翻译成Servlet 时使用的编码
                            JSP 文件保存时使用XX 编码    --  这个地方使用此属性是无法自动识别的，但是eclipse 可以智能识别并修改
                            JSP 文件在翻译成Servlet 时需要指定编码
                            翻译后的Servlet 在向外输出数据时需要通知服务器使用指定编码
                            需要通知浏览器使用指定编码来接收数据

                            JSP 文件在保存时需要指定编码(如果使用eclipse 或者myeclipse 开发工具，工具会根据pageEncoding 属性指定的编码来保存文件);
                            JSP 引擎在将JSP 翻译成Servlet 时，会根据pageEncoding 属性指定的编码格式来进行翻译;
                            翻译后的Servlet 在向外输出数据时，也会根据pageEncoding 属性指定的编码来通知服务器发送数据;
                            pageEncoding 也可以通知浏览器使用哪一个编码来接收服务端发送的数据;

                - include 指令: <%@ include ... %> 包含其他文件
                    <%@ include file="path" %>
                    作用：用来实现JSP 的页面包含效果
                    示例：编写三个JSP 文件，分别是head.jsp、body.jsp、foot.jsp , 并在body 中包含head.jsp 和foot.jsp。最后可以响应一个完整的HTML 网页。
                    步骤：
                        1. 创建三个jsp
                        2. 分别编写三个jsp 文件的内容
                        3. 在body.jsp 文件中包含head.jsp 和 foot.jsp 页面
                        4. 测试访问
                    
                - taglib 指令: <%@ taglib ... %> 引入标签库，如: 引入jstl 标签库。

    1.3 JSP 的九大隐式对象
        在JSP 中，当JSP 翻译成Servlet 时解析引擎会为JSP 创建9 个内置对象。这九个对象一但创建，就可以直接在JSP 中使用。
        page          this(当前Servlet 实例)
        request       ServletRquest
        response      ServletResponse
        config        ServletConfig
        application   ServletContext
        session       HttpSession
        exception     需要在<%@ page isErrorPage="true" language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> 中加上 isErrorPage="true"
        out           相当于response.getWrite();
        pageContext   

        1.3.1 pageContext 对象
            1. 可以作为入口对象，来获取其他八大隐式对象
                getPage() - 获取page对象
                getRequest() - 获取request 对象
                getResponse() - 获取response 对象
                getConfig() - 获取ServletConfig 对象
                getApplication() - 获取application 对象
                ...
                ...
                ...

            2. 作为域对象使用

            3. 生命周期: 当请求访问JSP 时创建pageContext 对象，访问结束立即销毁。
                一个请求可以访问多个JSP 
                一个请求只有一个request 对象

            4. 作用范围: 当前JSP，所以比较鸡肋，没多少实际意义。

            5. 主要功能: 在当前JSP 中共享数据

    1.4 JSP 的标签技术
        在JSP 中如果写入了大量的JAVA 代码，那么JSP 中的HTML 代码和JAVA 代码将会混杂在一起。会导致JSP 页面结构的混乱，不利于后期的维护和扩展。
        所以SUN 公司在JSP 的2.0 版本中推荐开发人员不要在JSP 中书写任何一行JAVA 代码。推荐使用JSP 中的标签来代表JSP 中的JAVA 代码。

        1.4.1 EL 表达式 -- servlet_6th_jsp/WebContent/el/el.jsp
            EL 表达式可以在JSP 中非常方便的获取数据
            EL 只能获取不能遍历
            EL 只能获取不能设置
            (1) EL 可以获取常量/变量(必须存入域中)/表达式的值; 
            (2) EL 可以获取域中的数组或集合中的数据;
            (3) EL 可以获取域中的map 集合中的数据;

        1.4.2 JSTL 标签库(JavaServerPages Standard Tag Library)  -- servlet_6th_jsp/WebContent/jstl/jstl.jsp
            JSTL 是一套标准通用的JSP 标签库，就为JAVA WEB 开发人员提供的一套标准标签库。它可以和EL 配合使用取代JSP 中大部分的JAVA 代码。
            在这个标签库中包含了大量的标签，这里我们讲解的标签包括: <c:set></c:set>  <c:if></c:if>  <c:forEach></c:forEach>
            (1)c:set 标签 - 可以用来将属性存入某一个域中，或者修改域中已有的属性；
                a). 设置属性
        			<hr />
        			<%-- var 属性用来指定将要存入域中的属性的属性名 --%>
        			<%-- value 属性用来指定对应属性名中存入的属性值 --%>
        			<%-- scope 属性用来指定该值存入到哪一个域对象中，request、response、session、page(pageContext)、application --%>
        			<c:set var="name" value="张飞" scope="page"></c:set>
        			${ name }

    			b). 修改作用域中已有的属性值
        			<hr />
        			<c:set var="name" value="刘备" scope="page" />
        			${ name }
        			<hr />

                c). 修改作用域中map 集合中的属性
        			<%
        				Map map = new HashMap();
        				map.put("name", "周星驰");
        				map.put("age", "18");
        				pageContext.setAttribute("varMap", map);
        			%>
        			${ varMap.name }
        			${ varMap.age }
        			<hr />
        			<!-- 获取map 变量，并指定要修改的哪一个属性(name), 修改为哪一个新的值("周星星") -->
        			<c:set target="${ varMap }" property="name" value="周星星" />
        			${ varMap.name }

        	(2) c:if 标签
        		<h3>JSTL 标签库 - c:if 标签</h3>
        		<!-- test 属性为条件表达式，如果条件为真，则输出yes -->
        		<!-- 在JSTL 标签中没有提供else 语句的标签，可以通过对c:if 中的条件取反，来模拟else 语句 -->
        		<c:if test="${ 3>5 }" >yes</c:if>
        		<c:if test="${ !(3>5) }" ></c:if>

        	(3) c:forEach 标签
        	    用于对集合中元素进行循环迭代，或者用于执行特定次数的循环
        	    a). 遍历数组或者集合中的元素
        	    b). 遍历map 集合中的元素
        	    c). 遍历从1 到100 之间的奇数，将位置是3 的倍数的数字颜色设置为红色
        	    c:forEach 标签常用的属性
                    items: 属性用于指定要被循环的数据，比如数组、集合、map等等。
                    begin: 属性用于指定开始的元素。
                    end: 属性指定最后一个元素
                    step: 属性用于指定每一次迭代的步长。
                    var: 属性用于指定当前条目（所遍历元素）的变量名称
                    varStatus: 属性用于指定循环状态的变量名称。
                    通过 varStatus 指定的变量还具有如下属性：index（所遍历到的元素的索引）、count（所遍历元素的总数）、first / last （所遍历到的元素是否为第一项 / 最后一项）
