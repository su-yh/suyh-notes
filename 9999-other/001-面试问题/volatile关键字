

双重检测锁时使用volatile
public class Singleton {
    // 关键：变量必须用 volatile 修饰
    private static volatile Singleton instance; 

    private Singleton() {}

    public static Singleton getInstance() {
        if (instance == null) { 
            synchronized (Singleton.class) { 
                if (instance == null) { 
                    instance = new Singleton(); // 初始化对象
                }
            }
        }
        return instance;
    }
}


volatile 在这里的作用是禁止指令重排序
关键步骤在于： instance = new Singleton(); 这里，编译器在这里可能会进行指令重排序（重排序不改变间线程的执行结果，但可能破坏多线程的正确性）。
    在这里有三个指令：1. 分配内存；2. 初始化对象（即：执行构造方法中的代码逻辑）；3. 给变量赋值；
    对象创建的标准步骤（理论顺序）为：1->2->3
    指令重排序导致的实际执行顺序为： 1->3->2
所以，如果没有volatile 关键字标识变量，那么可能引起的后果 就是：
    在执行：1->3->2 的，3 -> 2 之间发生了时间片的中断，使得instance 非null，而 构造方法还未执行时。另一个线程进入，发现instance 非null，直接使用该对象，就会发生可能的异常结果。


