Redis 缓存击穿
	原因及场景
		缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。
	解决方法
		1. 最常见的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。
		2. 另外也有一个更为简单粗暴的方法（我们采用的就是这种），如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。
Redis 缓存雪崩
	原因及场景
		缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。
	解决方法
		缓存失效时的雪崩效应对底层系统的冲击非常可怕。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线程(进程)写，从而避免失效时大量的并发请求落到底层存储系统上。这里分享一个简单方案就时讲缓存失效时间分散开，比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。
Redis Hash 一致性算法
	1. 为什么会有HASH 一致性算法，其提出的依据是：当一组数据插入到REDIS 集群中后，不会因为redis 集群节点的添加或者减少而出现大量未命中现象。
	2. 所以HASH 一致性算法的引入就是来解决这个问题的，也就是REDIS 的HASH 环的引入。
	3. Redis 是一个集群，每一个节点都是一个主机服务器。我们会将需要的一些缓存数据存储在这些主机节点上面，当查询时会先找到对应的主机节点，然后在该节点上找到我们所需要的数据。由于Redis 服务是一个集群模式的，所以不可避免的可能会出现主机节点的断开或者添加的情况出现，一旦出现这样的情况那么原来本应有的缓存数据可能就会丢失从而大量的访问指向了数据库。
	4. 为了解决这个问题，让尺可能少的访问指向数据库，Redis 引入了Hash 一致性算法。也就是在一个整数闭环上面，每一个点对应一个Hash 值，将每一个主机节点也对应到这个闭环上面，同时还对每一个主机节点添加虚拟节点，使其尽可能分散。然后每次来查询某个数据的时候，都会先计算它的Hash 值，然后映射到这个闭环上面，再就是顺时针找到第一个主机节点。那么这个查询的数据就应该在这个主机节点上面，之后就到这个主机节点上面去获取相应的值。
	5. 这样，如果某一个主机节点断开或者添加到这个集群中来，只会影响一部分的数据未命中情况。不会造成大面积的数据未命中而导致数据库的访问压力过大。

Redis 集群的搭建
	一主二从

Redis 如果在存储的时候还没有在从节点备份，那么这部分数据的结果是什么？
	

StringBuffer StringBuilder 的区别
	StringBuffer 线程安全
	StringBuilder 非线程安全

Runnable 和 Callable 的区别
	1. 方法签名: void Runnable.run() 、 V Callable.call() throws Exception;
	2. 返回值问题: Runnable 没有、Callable 有;
	3. 异常问题: Runnable 没有、Callable 有；
	Callable 是JDK1.5 加入的接口，作为Runnable 的一种补充。
	所以他们的区别就是Callable 有返回值，也可以抛出异常，而Runnable 都没有的。

线程池
	常规线程池的简便创建方法: 
		Executors.newFixedThreadPoll(int nThreads);
			创建一个固定数量的线程池
		Executors.newSingleThreadExector();
			创建一个只有单线程的线程池对象
		Executors.newCachedThreadPool();
			创建一个不限线程池数上限的线程池
	这些方法的底层都是构造的 ThreadPoolExector() 对象
		ThreadPoolExector(
			int corePoolSize, // 线程池长期维持的线程数，即使线程处理Idle 状态，也不会回收
			int maximumPoolSize, // 线程数上限
			Long keepAliveTime, TimeUnit unit, // 超过 corePoolSize 的线程的 Idle 时长，超过这个时间，多余的线程会被回收。
			BlockingQueue<Runnable> workQueue, // 任务的排队队列
			ThreadFactory threadFactory, // 新线程的产生方式
			RejectedExecutionHandler  handle	// 拒绝策略
		);
	线程池新任务的添加顺序
		corePoolSize -> 任务队列 -> maximumPoolSize -> 拒绝策略
			1. 如果正在执行任务的线程数量少于corePoolSize，那么新任务就会分配给空闲的线程执行；
			2. 如果corePoolSize 的线程都已经被占用，那么新添加的任务就会被放到Queue 队列中排除；
			3. 如果队列不能排列，则会创建新的线程；
			4. 如果创建新的线程和corePoolSize 的总数量超过了maximumPoolSize ，那么任务将会被拒绝，然后执行拒绝策略；
	线程池提供的几个拒绝策略
		AbortPolicy  			抛出RejectedExecutionException异常(默认策略)
		DiscardPolicy			什么也不做，直接忽略
		DiscardOldestPolicy		丢弃执行队列中最老的任务，尝试为当前任务腾出位置
		CallerRunsPolicy		直接由提交任务者执行这个任务
	线程池调用示例: 
		ExecutorService executorService = Executors.newFixedThreadPool(4);
		Future<Object> future = executorService.submit(new Callable<Object>() {
			@Override
			public Object call() throws Exception {
				// 该异常会在调用Future.get()时传递给调用者
				throw new RuntimeException("exception in call~");
			}
		});
		try {
			Object result = future.get();
		} catch (InterruptedException e) {
			// interrupt
		} catch (ExecutionException e) {
			// exception in Callable.call()
			e.printStackTrace();
		}

HashMap 的底层实现原理
	1. 底层结构是一个数组，数组元素是一个链表。每个链表的元素是 Map.Entry Key-Value 对。
	2. 加载因子: HashMap 总容量的一个比例值，当实际数量达到了这个比例时，那么这个HashMap 将会扩容同时调整整个Map 的结构。
	3. 当 Key-Value 对的数量达到了 HashMap 加载因子所指定的数量时， HashMap 将会重新调整容器的结构。
	4. put 时，对 Key 进行 Hash 求值，然后对其取余(相对于总容量)找到存储到数组下标位置。然后存放到该数组位置的链表上。
	5. 当元素的数量达到了8(固定常量值)个时将从链表转换成红黑树结构，当元素的数量减少到6(固定常量值)个时将从红黑树转换成链表。这样做是为了提高查询效率。
	6. 桶的数量就是 Map 的容量一致。
	7. get 时，对 key 求 Hash 值，找到下标位置。如果有多个，则需要做  Key 值的equals() 来做遍历判等。
	HashMap 可以接受null 的键值数据。
	HashTable 不接受null 的键值数据。
	桶 + 链表 + 加载因子
	jdk 1.8 使用红黑树处理链表
	
	
ConcurrentMap 是一个接口
	ConcurrentHashMap
	线程安全、高效

JVM 垃圾回收机制
	标记算法：引用计数算法、可达性分析算法
	垃圾收集算法：标记-清除算法、复制算法、标记-整理算法、分代收集算法
	常见的垃圾收集器：
		Serial收集器(复制算法)：新生代单线程收集器，标记和清理都是单线程，优点是简单高效。是Client 级别默认的GC方式，可以通过 -XX:+UsSerialGC 来强制指定。
		Serial Old 收集器(标记-整理算法)：老年代单线程收集器，Serial收集器的老年代版本。
		ParNew 收集器(停止-复制算法)：新生代收集器，可以认为是Serial 收集器的多线程版本，在多核CPU环境下有着比Serial 更好的表现。
		Parallel Scavenge 收集器(停止-复制算法)：并行收集器，追求高吞吐量，高效利用CPU。吞吐量一般为99%，吞吐量=用户线程时间/(用户线程时间+GC线程时间)。适合后台应用等对交互响应要求不高的场景。是server级别默认采用的GC方式，可用-XX:+UseParallelGC来强制指定，用-XX:ParallelGCThreads=4 来指定线程数。
		Parallel Old 收集器(停止-复制算法)：
		Parallel Scavenge 收集器的老年代版本，并行收集器，吞吐量优先。
		CMS(Concurrent Mark Sweep)收集器(标记-清理算法)：高并发、低停顿，追求最短GC回收停顿时间，CPU占用比较高，响应时间快，停顿时间短，多核CPU 追求高响应时间的选择。

数据库调优
	Blob Text 大字段会使索引失效，所以这种字段都是单独处理，或者使用其他的方式。

MySQL 的锁结构  行锁还是表锁
	根据引擎的不同而不同，一般我们使用的都是InnoDB，它的特点就是可以做事务控制。默认的锁级别为行级别锁。同时也支持表级别锁。

RabbitMQ 消息丢失的处理

Spring IOC
	控制反转
	其实IOC 我的理解就是它是一个大的容器，这个容器中管理着大量的 Bean 对象，我们需要用到的时候直接管 Spring 这个大容器要就可以了。
	另外我们可以根据自己的需求来指定不同的 Bean 对象的使用。

	循环依赖问题，ClassA 依赖ClassB，同时ClassB 也依赖ClassA。？？？？
		1. 最简单的方法就是改为set 注入
		2. 在构造注入的时候使用懒加载 public ClassA(@Lazy ClassB b) {}
		3. 使用@PostConstruct 在有循环依赖的地方让其先把对象构造出来，在第一次使用对象的时候再进行实际的注入。

Spring AOP
	面向切面编程
	其实其底层就是使用了代理，对于有接口的使用的是JDK 的代理，没有接口的使用的就是CGLib 实现代理。
	面向切面编程其实际就是对一些需要统一处理的功能提取到一个地方处理，这样也方便管理和维护。

SpringBoot 有哪些注解
	@SpringBootApplication
	@MapperScan
	@Controller
	@Service
	@Component
	@Autowired
	@RestController
	@RequestMapping
	@ResponseBody
	@Bean
	@Value
	@Confi
	@Transactional
	@Configuration
	@ControllerAdvice
		哪个类上面加了这个注解，哪个类就是一个异常处理类
	@ExceptionHandler(value=java.lang.Exception.class)
		
	@SpringBootConfiguration
	@EnableAutoConfiguration
		完成一些初始化环境的配置
	@ComponentScan
		来完成Spring的组件扫描
	AOP 切面
	@Aspect		- 切面
	@Joinpoint	- 连接点
	@Advice		- 通知
	@Pointcut	- 切入点
	@Before		- 前置通知
		前置通知在切入点运行前执行，不会影响切入点的逻辑
	@After		- 后置通知
		后置通知在切入点正常运行结束后执行，如果切入点抛出异常，则在抛出异常前执行
	@AfterThrowing	- 异常通知
		异常通知在切入点抛出异常前执行，如果切入点正常运行（未抛出异常），则不执行
	@AfterReturning	- 返回通知
		返回通知在切入点正常运行结束后执行，如果切入点抛出异常，则不执行
	@Around			- 环绕通知
		环绕通知是功能最强大的通知，可以在切入点执行前后自定义一些操作。环绕通知需要负责决定是继续处理join point(调用ProceedingJoinPoint的proceed方法)还是中断执行

Linux 常用命令
	tail -F
	less file.txt
	grep 
	sed
	scp
	top
	chmod
		修改权限
	
Linux 在线使用
	http://tpcg.io/2jC11bYX 
	https://www.tutorialspoint.com/unix_terminal_online.php
		
	
如何查看日志的
	使用 less grep vi 命令
	
CAP 原理
	CAP原则又称CAP定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。
	ZooKeeper 是CP 原理，一致性+分区容错性。
		ZooKeeper 在选举的时候是不对外提供服务的，所以这就不满足可用性。它是需要先保证一致性，在数据一致的前提下，再提供服务的可用性。
	Eureka 是AP 原理，可用性+分区容错性。
		Eurea 会首先保证可用性，也就是说只要有一台服务可用，则服务可用。在服务可用的前提下，再去同步数据保证数据的一致性。
	
面试题目
	扑克牌的洗牌
		随机选择两个位置的牌，进行多次交换就可以了。
	